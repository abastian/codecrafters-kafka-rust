use bytes::Buf;

use crate::{
    metadata::{Record, RecordBatch},
    protocol::{message::ResponseHeader, Readable, ReadableVersion},
};

use super::{response::Response, *};

#[test]
fn test_read_fetch_multi_messages() {
    #[rustfmt::skip]
    let data: Vec<u8> = vec![
        0x00, 0x00, 0x01, 0x15, 0x76, 0x3b, 0x25, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xa8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x02, 0xab, 0xfd, 0x04, 0x91, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x91, 0xe0, 0x5b, 0x6d, 0x8b, 0x00, 0x00, 0x01,
        0x91, 0xe0, 0x5b, 0x6d, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x24, 0x00, 0x00, 0x00, 0x01, 0x18, 0x48, 0x65, 0x6c,
        0x6c, 0x6f, 0x20, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x10, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x02, 0x55, 0x60, 0x53, 0x93, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x91, 0xe0, 0x5b, 0x6d, 0x8b, 0x00, 0x00, 0x01,
        0x91, 0xe0, 0x5b, 0x6d, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x32, 0x00, 0x00, 0x00, 0x01, 0x26, 0x48, 0x65, 0x6c,
        0x6c, 0x6f, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x61, 0x66, 0x74, 0x65, 0x72, 0x73, 0x21,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
    ];

    let data_ref: &[u8] = data.as_ref();
    let mut read_buffer = data_ref;

    let _sz_request = i32::read(&mut read_buffer);
    let _header = ResponseHeader::read_version(&mut read_buffer, 1).unwrap();
    let resp = Response::read_version(&mut read_buffer, 16).unwrap();
    for response in resp.responses {
        for partition in response.partitions() {
            let Some(mut record) = partition.records().cloned() else {
                continue;
            };

            while record.has_remaining() {
                let rb = RecordBatch::read_result(&mut record).unwrap();
                for record in rb.records() {
                    let Record::Value(v) = record else {
                        continue;
                    };
                    let value = std::str::from_utf8(v.value().as_ref()).unwrap();
                    println!("value: {}", value);
                }
            }
        }
    }
}
